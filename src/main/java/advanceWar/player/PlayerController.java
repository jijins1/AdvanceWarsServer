package advanceWar.player;

import static org.springframework.hateoas.mvc.ControllerLinkBuilder.linkTo;
import static org.springframework.hateoas.mvc.ControllerLinkBuilder.methodOn;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import advanceWar.partie.Partie;
import advanceWar.player.Player;
import advanceWar.player.PlayerRepository;


@Controller    // This means that this class is a Controller
@RequestMapping(path="/player") // This means URL's start with /demo (after Application path)
public class PlayerController {
	@Autowired // This means to get the bean called userRepository
	           // Which is auto-generated by Spring, we will use it to handle the data
	private PlayerRepository userRepository;
	
	
	@PostMapping(path="") // Map ONLY POST Requests
	public @ResponseBody ResponseEntity addNewUser (@RequestParam String name
			) {
		// @ResponseBody means the returned String is the response, not a view name
		// @RequestParam means it is a parameter from the GET or POST request
		if(this.userRepository.findByName(name).isPresent()){
			throw new PlayerAlreadyExistException(name);
		}
		else {
			Player n = new Player(name);
			
			userRepository.save(n);
	        n.add(linkTo(methodOn(PlayerController.class).GetPlayerWithId(n.getIdPartie())).withSelfRel());
	
	        return new ResponseEntity<Player>(n, HttpStatus.OK);
		}
	}
	
	
	@GetMapping(value="/{userId}")
	public @ResponseBody ResponseEntity GetPlayerWithId(@PathVariable int userId) {
		this.validateUser(userId);
		return new ResponseEntity<Player>(this.userRepository.findById(userId).get(),HttpStatus.OK);
	}
	@GetMapping(value="/{userId}/parties")
	public @ResponseBody ResponseEntity GetPartieWithPlayerId(@PathVariable int userId) {
		this.validateUser(userId);
		return new ResponseEntity<List<Partie>>(this.userRepository.findById(userId).get().getParties(),HttpStatus.OK);
	}
	/**
	 *  Path :/player/all
	 * @return
	 */
	@GetMapping(path="/all")
	public @ResponseBody Iterable<Player> getAllUsers() {
		// This returns a JSON or XML with the users
		return userRepository.findAll();
	}
	
	private void validateUser(int userId) {
		this.userRepository.findById(userId).orElseThrow(
				() -> new PlayerNotFoundException(userId));
	}
	private void validateUser(String playerName) {
		this.userRepository.findByName(playerName).orElseThrow(
				() -> new PlayerNotFoundException(playerName));
	}
	
	
	
}
